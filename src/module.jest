(define ('evaluate-scope-clause scope-sym rules ('module . clauses))
	('evaluate-module-clauses (gensym 'module) rules clauses '()))

(define ('evaluate-module-clauses scope-sym rules (clause-head . clause-tail) exports)
	('evaluate-module-clauses-process-result scope-sym clause-tail
		('evaluate-module-clause scope-sym rules clause-head exports)))
(define ('evaluate-module-clauses scope-sym rules () exports)
	(cons
		(cons (list (list 'const scope-sym) (list 'quote rules)) rules) exports))

(define ('evaluate-module-clauses-process-result scope-sym clause-tail (rules . exports))
	('evaluate-module-clauses scope-sym rules clause-tail exports))

(define ('evaluate-module-scope-clause-process-result scope-sym (rules . rslt) exports)
	(cons rules exports))
(define ('evaluate-module-clause scope-sym rules clause exports)
	('evaluate-module-scope-clause-process-result scope-sym
	 ('evaluate-scope-clause scope-sym rules clause) exports))
(define ('evaluate-module-export-clause-process-result scope-sym rules compiled-rule exports)
	(cons
		(cons compiled-rule rules)
		(cons compiled-rule exports)))
(define ('evaluate-module-clause scope-sym rules ('export ptn expr) exports)
	('evaluate-module-export-clause-process-result scope-sym rules
	 ('compile-scope-rule scope-sym rules ptn expr) exports))

(scope
	(module
		(export ('foo x) (+ 2 x))
		(printf "~a~n" ('foo 3)))
	('foo 5))

