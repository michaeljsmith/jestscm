(define ('evaluate-scope-clause scope-sym rules ('module . clauses))
	('evaluate-module-clauses (gensym 'module) rules clauses '() '()))

(define ('evaluate-module-clauses scope-sym rules (clause-head . clause-tail) exports symbols)
	('evaluate-module-clauses-process-result scope-sym clause-tail
		('evaluate-module-clause scope-sym rules clause-head exports symbols)))
(define ('evaluate-module-clauses scope-sym rules () exports symbols)
	(cons
		(cons (list (list 'const scope-sym) (list 'quote rules)) rules) (cons exports symbols)))

(define ('evaluate-module-clauses-process-result scope-sym clause-tail (rules exports . symbols))
	('evaluate-module-clauses scope-sym rules clause-tail exports symbols))

(define ('evaluate-module-scope-clause-process-result scope-sym (rules . rslt) exports symbols)
	(cons rules (cons exports symbols)))
(define ('evaluate-module-clause scope-sym rules clause exports symbols)
	('evaluate-module-scope-clause-process-result scope-sym
	 ('evaluate-scope-clause scope-sym rules clause) exports symbols))
(define ('evaluate-module-export-form-clause-process-result scope-sym rules compiled-rule exports symbols)
	(cons
		(cons compiled-rule rules)
		(cons
			(cons compiled-rule exports)
			symbols)))
(define ('evaluate-module-clause scope-sym rules ('export ptn expr) exports symbols)
	('evaluate-module-export-form-clause-process-result scope-sym rules
	 ('compile-scope-rule scope-sym
		(cons (list (list 'const scope-sym) (list 'quote rules)) rules) ptn expr) exports symbols))

(scope
	(module
		(export 'foo 'foo)
		(export (,foo x) (+ 2 x))
		(printf "~a~n" ('foo 3)))
	('foo 5))

;(define ('compile-pattern rules ('unquote expr))
;	(list 'const (evaluate rules expr)))
