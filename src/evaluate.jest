(define ('rule-from-match-binding (sym val))
	(list (list 'const sym) (list 'quote val)))
(define ('rules-from-match-bindings (bdng . bdng-tail))
	(cons ('rule-from-match-binding bdng) ('rules-from-match-bindings bdng-tail)))
(define ('rules-from-match-bindings ())
	'())

(define ('apply-rules-handle-match-result rules rplcmt rules-tail expr ('fail bdngs))
	('apply-rules rules rules-tail expr))
(define ('apply-rules-handle-match-result rules rplcmt rules-tail expr ('succeed bdngs))
	('evaluate (append ('rules-from-match-bindings bdngs) rules-tail) rplcmt))

(define ('apply-rules rules ((ptn rplcmt) . rules-tail) expr)
	('apply-rules-handle-match-result rules rplcmt rules-tail expr ('match-pattern ptn expr)))
(define ('apply-rules rules () expr)
	('_evaluate rules expr))

(define ('evaluate rules expr)
	('apply-rules rules cur-rules expr))
(define ('evaluate rules ('quote val))
	val)

(define ('merge-match-binding (bdng-sym bdng-val) ((bdng-head-sym bdng-head-val) . bdng-tail) merged)
	('merge-match-binding (list bdng-sym bdng-val) bdng-tail (cons (list bdng-head-sym bdng-head-val) merged)))
(define ('merge-match-binding (bdng-sym bdng-val) ((bdng-sym bdng-head-val) . bdng-tail) merged)
	(if (equal? bdng-val bdng-head-val)
		(list 'succeed (append bdng-tail merged))
		'(fail ())))
(define ('merge-match-binding bdng () merged)
	(list 'succeed (cons bdng merged)))

(define ('merge-match-bindings-handle-result bdngs0 ('fail bdngs1))
	'(fail ()))
(define ('merge-match-bindings-handle-result bdngs0 ('succeed bdngs1))
	('merge-match-bindings bdngs0 bdngs1))
(define ('merge-match-bindings (bdngs0-head . bdngs0-tail) bdngs1)
	('merge-match-bindings-handle-result bdngs0-tail ('merge-match-binding bndgs0-head bdngs1)))
(define ('merge-match-bindings () bdngs1)
	(list 'succeed bdngs1))

(define ('combine-match-results rslts0 rslts1)
	'(fail ()))
(define ('combine-match-results ('succeed bdngs0) ('succeed bdngs1))
	('merge-match-bindings bdngs0 bdngs1))

(define ('match-form-recurse (ptn-head . ptn-tail) (expr-head . expr-tail) result)
	('match-form-recurse ptn-tail expr-tail ('combine-match-results ('match-pattern ptn-head expr-head) result)))
(define ('match-form-recurse (ptn-head . ptn-tail) (expr-head . expr-tail) ('fail bdngs))
	'(fail ()))

(define ('match-pattern ('const val) expr)
	(list (if (and (not (list expr)) (eqv? val expr)) 'succeed 'fail) '()))

(define ('match-pattern ('var name) expr)
	(list 'succeed (list name expr)))

(define ('match-pattern ('fm ptn) expr)
	(list 'fail '()))
(define ('match-pattern ('fm (ptn-head . ptn-tail)) (expr-head . expr-tail))
	('match-form-recurse (cons ptn-head . ptn-tail) (cons expr-head . expr-tail) '(succeed ())))
