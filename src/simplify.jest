(define ('second a b) b)

(define ('rule-from-match-binding (sym val))
	(list (list 'const sym) (list 'quote val)))
(define ('rules-from-match-bindings (bdng . bdng-tail))
	(cons ('rule-from-match-binding bdng) ('rules-from-match-bindings bdng-tail)))
(define ('rules-from-match-bindings ())
	'())

(define ('apply-rules-handle-match-result rules rplcmt rules-tail expr ('fail bdngs))
	('apply-rules-recurse rules rules-tail expr))
(define ('apply-rules-handle-match-result rules rplcmt rules-tail expr ('succeed bdngs))
	(list 'succeed ('simplify (append ('rules-from-match-bindings bdngs) rules) rplcmt)))

(define ('apply-rules-recurse rules ((ptn rplcmt) . rules-tail) expr)
	('apply-rules-handle-match-result rules rplcmt rules-tail expr ('match-pattern ptn expr)))
(define ('apply-rules-recurse rules () expr)
	'(fail ()))

(define ('simplify-args rules (arg-head . arg-tail))
	(cons ('simplify rules arg-head) ('simplify-args rules arg-tail)))
(define ('simplify-args rules ())
	'())

(define ('apply-rules-handle-eval-result expr (success result))
	result)
(define ('apply-rules-handle-eval-result expr ('fail result))
	('evaluate-builtin expr))

(define ('apply-rules-handle-macro-result rules expr (success result))
	result)
(define ('apply-rules-handle-macro-result rules expr ('fail result))
	('apply-rules-handle-eval-result expr
	 ('apply-rules-recurse rules rules expr)))
(define ('apply-rules rules expr)
	('apply-rules-handle-macro-result rules expr
	 ('apply-rules-recurse rules rules (list '_dispatch rules expr))))

(define ('simplify rules expr)
	('apply-rules rules expr))
(define ('simplify rules (expr-head . expr-tail))
	('apply-rules rules ('simplify-args rules (cons expr-head expr-tail))))
(define ('simplify rules ())
	('apply-rules rules '()))
(define ('simplify rules ('quote val))
	val)
(define ('simplify old-rules ('evaluate rules expr))
	('simplify ('simplify old-rules rules) ('simplify old-rules expr)))

(define ('merge-match-binding (bdng-sym bdng-val) ((bdng-head-sym bdng-head-val) . bdng-tail) merged)
	('merge-match-binding (list bdng-sym bdng-val)
	 bdng-tail (cons (list bdng-head-sym bdng-head-val) merged)))
(define ('merge-match-binding (bdng-sym bdng-val) ((bdng-sym bdng-head-val) . bdng-tail) merged)
	('if (equal? bdng-val bdng-head-val)
		(list 'succeed (append bdng-tail merged))
		'(fail ())))
(define ('merge-match-binding bdng () merged)
	(list 'succeed (cons bdng merged)))

(define ('merge-match-bindings-handle-result bdngs0 ('fail bdngs1))
	'(fail ()))
(define ('merge-match-bindings-handle-result bdngs0 ('succeed bdngs1))
	('merge-match-bindings bdngs0 bdngs1))
(define ('merge-match-bindings (bdngs0-head . bdngs0-tail) bdngs1)
	('merge-match-bindings-handle-result bdngs0-tail ('merge-match-binding bdngs0-head bdngs1 '())))
(define ('merge-match-bindings () bdngs1)
	(list 'succeed bdngs1))

(define ('combine-match-results rslts0 rslts1)
	'(fail ()))
(define ('combine-match-results ('succeed bdngs0) ('succeed bdngs1))
	('merge-match-bindings bdngs0 bdngs1))

(define ('match-pattern ('const val) expr)
	(list ('if ('and (not (list? expr)) (eqv? val expr)) 'succeed 'fail) '()))

(define ('match-pattern ('var name) expr)
	(list 'succeed (list (list name expr))))

(define ('match-pattern ('fm ptn) expr)
	(list 'fail '()))
;(define ('match-pattern ('fm (ptn-head . ptn-tail)) (expr-head . expr-tail))
;	('match-form-recurse (cons ptn-head ptn-tail) (cons expr-head expr-tail) '(succeed ())))
(define ('match-pattern ('fm (ptn-head . ptn-tail)) (expr-head . expr-tail))
	('combine-match-results
		('match-pattern ptn-head expr-head)
		('match-pattern ptn-tail expr-tail)))
(define ('match-pattern ('fm ()) ())
	'(succeed ()))

;('simplify
; '()
; (list
;	 ''evaluate
;	 ''(((fm ((const match-pattern2) fm ((fm ((const var) fm ((var name) fm ()))) fm ((var expr) fm ()))))
;			(list (quote succeed) (list (list name expr)))))
;	 ''('match-pattern2 '(var a) 1)))

('simplify '()
 (list
	'evaluate
 ''(((fm ((const match-pattern) fm ((fm ((const const) fm ((var val) fm ()))) fm ((var expr) fm ()))))
		(list ((quote if) ((quote and) (not (list? expr)) (eqv? val expr)) (quote succeed) (quote fail)) (quote ()))))
 ''('match-pattern '(const a) 'a)))

;('match-pattern
; '(fm ((const compile-pattern) fm ((fm ((const quote) fm ((fm ((const quote) fm ((var x) fm ()))) fm ()) fm ())) fm ())))
; ;'(fm ((const compile-pattern) fm ((fm ((const quote) fm ((var x) fm ()))) fm ())))
; '('list '(var a) 1))

;('match-pattern
; '(fm ((fm ((const quote) fm ((var x) fm ()))) fm ()) fm ())
; '((var a)))

;('match-pattern
; '(fm ((const quote) fm ((fm ((const quote) fm ((var x) fm ()))) fm ()) fm ()))
; '(quote (var a)))

;('match-pattern '(fm ()) '())
;('match-pattern '(var a) 1)
;('match-pattern '(const a) 'a)

;('match-pattern '(fm ((fm ((const foo) . (var a))) . (fm ((var b) . (fm ()))))) '((foo 1) (3 4)))
;'(fm ((fm ((const foo) . (var a))) . (fm ((var b) . (fm ())))))
;'((foo 1) (3 4))

;('simplify
; '(((fm ((fm ((const foo) . (var a))) . (fm ((var b) . (fm ())))))
;	 (list a b)))
; '('(foo 1) '(3 4)))

;('simplify '() '(list 1 2))

;(define ('test-outer (bar))
;	bar)
;(define ('test-func foo)
;	(list foo))
;
;('test-outer ('test-func 1))

